#include <mpi.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
using namespace std;

const int n = 1000, col = 3, r = 10000;

int main(int argc, char *argv[])
{
	typedef struct {
		float coord[3];
		int ch;
		char l[2];
	} part;
	part p[n];
	MPI_Aint lb0, lb1, ex;
	int i, j, rank, size;
	double t1, t2;


	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);



	if (rank == 0) {
		for (i = 0; i < n; i++) {
			for (j = 0; j < 3; j++)
				p[i].coord[j] = (float)rand() / (float)RAND_MAX*10.0;
			p[i].ch = 54;
			strcpy_s(p[i].l, "Ab");
		}
	}
	/* zdes’: opredelit istinni razmer strukturi */
	MPI_Get_address(&p[0], &lb0);
	MPI_Get_address(&p[1], &lb1);
	ex = lb1 - lb0;

	/* zdes’: ispolzuia tip dannih MPI_BYTE otpravit I prinyat dannie */
	t1 = MPI_Wtime();
	if (rank == 0) {
		for (i = 0; i < r; i++)
			MPI_Send(p, n * ex, MPI_BYTE, 1, i, MPI_COMM_WORLD);
	}
	else if (rank == 1) {
		for (i = 0; i < r; i++)
			MPI_Recv(p, n * ex, MPI_BYTE, 0, i, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	t2 = MPI_Wtime();


	cout << "Time: " << rank << " " << (t2 - t1) / (double)r << endl;
	cout <<"Check: " << rank << " " << p[n - 1].l << " " <<
		p[n - 1].coord[0] <<" "<< p[n - 1].coord[1] << " " <<
		p[n - 1].coord[2] << endl;

	MPI_Finalize();
	return 0;
}
