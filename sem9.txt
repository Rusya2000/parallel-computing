#include <iostream>
#include <stdlib.h>
#include <mpi.h>

using namespace std;

int main(int argc, char* argv[])
{
 int i, rank, size;

 MPI_Init(&argc, &argv);
 MPI_Status s;

 MPI_Comm_size(MPI_COMM_WORLD, &size);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);

 double a, b;
 if (rank != 0)
  a = (rand() % rank + 100) / (rank * 3 + 5);
 else a = rand() % 10;

 cout << a << " rank: " << rank << endl;

 for (i = 0; i < size; i++) {
  if (i % 2 == 0) { // even phase
   if (rank % 2 == 0) { // even process
    MPI_Recv(&b, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD, &s);
    MPI_Send(&a, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);
    a = min(a, b);
   }
   else { // odd process
    MPI_Send(&a, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD);
    MPI_Recv(&b, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, &s);
    a = max(a, b);
   }
  }
  else if (rank > 0 && rank < size - 1) { // odd phase
   if (rank % 2 == 0) { // even process
    MPI_Recv(&b, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, &s);
    MPI_Send(&a, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD);
    a = max(a, b);
   }
   else { // odd process
    MPI_Send(&a, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);
    MPI_Recv(&b, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD, &s);
    a = min(a, b);
   }
  }
 }
 cout <<" After "<< a << " rank: " << rank << endl;

 MPI_Finalize();
 return 0;
}